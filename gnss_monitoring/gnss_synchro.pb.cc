// Generated by the protocol buffer compiler.  
// source: gnss_synchro.proto

#include "gnss_synchro.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_gnss_5fsynchro_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gnss_5fsynchro_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GnssSynchro;
}  // namespace protobuf_gnss_5fsynchro_2eproto
namespace gnss_sdr {
class GnssSynchroDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GnssSynchro>
      _instance;
} _GnssSynchro_default_instance_;
class ObservablesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Observables>
      _instance;
} _Observables_default_instance_;
}  // namespace gnss_sdr
namespace protobuf_gnss_5fsynchro_2eproto {
static void InitDefaultsGnssSynchro() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnss_sdr::_GnssSynchro_default_instance_;
    new (ptr) ::gnss_sdr::GnssSynchro();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnss_sdr::GnssSynchro::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GnssSynchro =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGnssSynchro}, {}};

static void InitDefaultsObservables() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gnss_sdr::_Observables_default_instance_;
    new (ptr) ::gnss_sdr::Observables();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gnss_sdr::Observables::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Observables =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsObservables}, {
      &protobuf_gnss_5fsynchro_2eproto::scc_info_GnssSynchro.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GnssSynchro.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Observables.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, system_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, prn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, acq_delay_samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, acq_doppler_hz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, acq_samplestamp_samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, acq_doppler_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, flag_valid_acquisition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, fs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, prompt_i_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, prompt_q_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, cn0_db_hz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, carrier_doppler_hz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, carrier_phase_rads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, code_phase_samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, tracking_sample_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, flag_valid_symbol_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, correlation_length_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, flag_valid_word_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, tow_at_current_symbol_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, pseudorange_m_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, rx_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, flag_valid_pseudorange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, interp_tow_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::GnssSynchro, flag_pll_180_deg_phase_locked_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::Observables, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gnss_sdr::Observables, observable_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gnss_sdr::GnssSynchro)},
  { 31, -1, sizeof(::gnss_sdr::Observables)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gnss_sdr::_GnssSynchro_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gnss_sdr::_Observables_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gnss_synchro.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022gnss_synchro.proto\022\010gnss_sdr\"\226\005\n\013GnssS"
      "ynchro\022\016\n\006system\030\001 \001(\t\022\016\n\006signal\030\002 \001(\t\022\013"
      "\n\003prn\030\003 \001(\r\022\022\n\nchannel_id\030\004 \001(\005\022\031\n\021acq_d"
      "elay_samples\030\005 \001(\001\022\026\n\016acq_doppler_hz\030\006 \001"
      "(\001\022\037\n\027acq_samplestamp_samples\030\007 \001(\004\022\030\n\020a"
      "cq_doppler_step\030\010 \001(\r\022\036\n\026flag_valid_acqu"
      "isition\030\t \001(\010\022\n\n\002fs\030\n \001(\003\022\020\n\010prompt_i\030\013 "
      "\001(\001\022\020\n\010prompt_q\030\014 \001(\001\022\021\n\tcn0_db_hz\030\r \001(\001"
      "\022\032\n\022carrier_doppler_hz\030\016 \001(\001\022\032\n\022carrier_"
      "phase_rads\030\017 \001(\001\022\032\n\022code_phase_samples\030\020"
      " \001(\001\022\037\n\027tracking_sample_counter\030\021 \001(\004\022 \n"
      "\030flag_valid_symbol_output\030\022 \001(\010\022\035\n\025corre"
      "lation_length_ms\030\023 \001(\005\022\027\n\017flag_valid_wor"
      "d\030\024 \001(\010\022 \n\030tow_at_current_symbol_ms\030\025 \001("
      "\r\022\025\n\rpseudorange_m\030\026 \001(\001\022\017\n\007rx_time\030\027 \001("
      "\001\022\036\n\026flag_valid_pseudorange\030\030 \001(\010\022\025\n\rint"
      "erp_tow_ms\030\031 \001(\001\022%\n\035flag_PLL_180_deg_pha"
      "se_locked\030\032 \001(\010\"8\n\013Observables\022)\n\nobserv"
      "able\030\001 \003(\0132\025.gnss_sdr.GnssSynchrob\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 761);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gnss_synchro.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gnss_5fsynchro_2eproto
namespace gnss_sdr {

// ===================================================================

void GnssSynchro::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GnssSynchro::kSystemFieldNumber;
const int GnssSynchro::kSignalFieldNumber;
const int GnssSynchro::kPrnFieldNumber;
const int GnssSynchro::kChannelIdFieldNumber;
const int GnssSynchro::kAcqDelaySamplesFieldNumber;
const int GnssSynchro::kAcqDopplerHzFieldNumber;
const int GnssSynchro::kAcqSamplestampSamplesFieldNumber;
const int GnssSynchro::kAcqDopplerStepFieldNumber;
const int GnssSynchro::kFlagValidAcquisitionFieldNumber;
const int GnssSynchro::kFsFieldNumber;
const int GnssSynchro::kPromptIFieldNumber;
const int GnssSynchro::kPromptQFieldNumber;
const int GnssSynchro::kCn0DbHzFieldNumber;
const int GnssSynchro::kCarrierDopplerHzFieldNumber;
const int GnssSynchro::kCarrierPhaseRadsFieldNumber;
const int GnssSynchro::kCodePhaseSamplesFieldNumber;
const int GnssSynchro::kTrackingSampleCounterFieldNumber;
const int GnssSynchro::kFlagValidSymbolOutputFieldNumber;
const int GnssSynchro::kCorrelationLengthMsFieldNumber;
const int GnssSynchro::kFlagValidWordFieldNumber;
const int GnssSynchro::kTowAtCurrentSymbolMsFieldNumber;
const int GnssSynchro::kPseudorangeMFieldNumber;
const int GnssSynchro::kRxTimeFieldNumber;
const int GnssSynchro::kFlagValidPseudorangeFieldNumber;
const int GnssSynchro::kInterpTowMsFieldNumber;
const int GnssSynchro::kFlagPLL180DegPhaseLockedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GnssSynchro::GnssSynchro()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gnss_5fsynchro_2eproto::scc_info_GnssSynchro.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gnss_sdr.GnssSynchro)
}
GnssSynchro::GnssSynchro(const GnssSynchro& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  system_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.system().size() > 0) {
    system_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
  signal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signal().size() > 0) {
    signal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signal_);
  }
  ::memcpy(&prn_, &from.prn_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_pll_180_deg_phase_locked_) -
    reinterpret_cast<char*>(&prn_)) + sizeof(flag_pll_180_deg_phase_locked_));
  // @@protoc_insertion_point(copy_constructor:gnss_sdr.GnssSynchro)
}

void GnssSynchro::SharedCtor() {
  system_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&prn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_pll_180_deg_phase_locked_) -
      reinterpret_cast<char*>(&prn_)) + sizeof(flag_pll_180_deg_phase_locked_));
}

GnssSynchro::~GnssSynchro() {
  // @@protoc_insertion_point(destructor:gnss_sdr.GnssSynchro)
  SharedDtor();
}

void GnssSynchro::SharedDtor() {
  system_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GnssSynchro::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GnssSynchro::descriptor() {
  ::protobuf_gnss_5fsynchro_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fsynchro_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GnssSynchro& GnssSynchro::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gnss_5fsynchro_2eproto::scc_info_GnssSynchro.base);
  return *internal_default_instance();
}


void GnssSynchro::Clear() {
// @@protoc_insertion_point(message_clear_start:gnss_sdr.GnssSynchro)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  system_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&prn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_pll_180_deg_phase_locked_) -
      reinterpret_cast<char*>(&prn_)) + sizeof(flag_pll_180_deg_phase_locked_));
  _internal_metadata_.Clear();
}

bool GnssSynchro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gnss_sdr.GnssSynchro)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string system = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->system().data(), static_cast<int>(this->system().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gnss_sdr.GnssSynchro.system"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signal().data(), static_cast<int>(this->signal().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gnss_sdr.GnssSynchro.signal"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 prn = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 channel_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acq_delay_samples = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acq_delay_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acq_doppler_hz = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acq_doppler_hz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 acq_samplestamp_samples = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acq_samplestamp_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 acq_doppler_step = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acq_doppler_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool flag_valid_acquisition = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_valid_acquisition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 fs = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double prompt_i = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prompt_i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double prompt_q = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prompt_q_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cn0_db_hz = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cn0_db_hz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double carrier_doppler_hz = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &carrier_doppler_hz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double carrier_phase_rads = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &carrier_phase_rads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double code_phase_samples = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &code_phase_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 tracking_sample_counter = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tracking_sample_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool flag_valid_symbol_output = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_valid_symbol_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 correlation_length_ms = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &correlation_length_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool flag_valid_word = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_valid_word_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tow_at_current_symbol_ms = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tow_at_current_symbol_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pseudorange_m = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pseudorange_m_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rx_time = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rx_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool flag_valid_pseudorange = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_valid_pseudorange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double interp_tow_ms = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interp_tow_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool flag_PLL_180_deg_phase_locked = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_pll_180_deg_phase_locked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gnss_sdr.GnssSynchro)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gnss_sdr.GnssSynchro)
  return false;
#undef DO_
}

void GnssSynchro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gnss_sdr.GnssSynchro)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string system = 1;
  if (this->system().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system().data(), static_cast<int>(this->system().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gnss_sdr.GnssSynchro.system");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->system(), output);
  }

  // string signal = 2;
  if (this->signal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signal().data(), static_cast<int>(this->signal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gnss_sdr.GnssSynchro.signal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->signal(), output);
  }

  // uint32 prn = 3;
  if (this->prn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prn(), output);
  }

  // int32 channel_id = 4;
  if (this->channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->channel_id(), output);
  }

  // double acq_delay_samples = 5;
  if (this->acq_delay_samples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->acq_delay_samples(), output);
  }

  // double acq_doppler_hz = 6;
  if (this->acq_doppler_hz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->acq_doppler_hz(), output);
  }

  // uint64 acq_samplestamp_samples = 7;
  if (this->acq_samplestamp_samples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->acq_samplestamp_samples(), output);
  }

  // uint32 acq_doppler_step = 8;
  if (this->acq_doppler_step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->acq_doppler_step(), output);
  }

  // bool flag_valid_acquisition = 9;
  if (this->flag_valid_acquisition() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->flag_valid_acquisition(), output);
  }

  // int64 fs = 10;
  if (this->fs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->fs(), output);
  }

  // double prompt_i = 11;
  if (this->prompt_i() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->prompt_i(), output);
  }

  // double prompt_q = 12;
  if (this->prompt_q() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->prompt_q(), output);
  }

  // double cn0_db_hz = 13;
  if (this->cn0_db_hz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->cn0_db_hz(), output);
  }

  // double carrier_doppler_hz = 14;
  if (this->carrier_doppler_hz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->carrier_doppler_hz(), output);
  }

  // double carrier_phase_rads = 15;
  if (this->carrier_phase_rads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->carrier_phase_rads(), output);
  }

  // double code_phase_samples = 16;
  if (this->code_phase_samples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->code_phase_samples(), output);
  }

  // uint64 tracking_sample_counter = 17;
  if (this->tracking_sample_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->tracking_sample_counter(), output);
  }

  // bool flag_valid_symbol_output = 18;
  if (this->flag_valid_symbol_output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->flag_valid_symbol_output(), output);
  }

  // int32 correlation_length_ms = 19;
  if (this->correlation_length_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->correlation_length_ms(), output);
  }

  // bool flag_valid_word = 20;
  if (this->flag_valid_word() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->flag_valid_word(), output);
  }

  // uint32 tow_at_current_symbol_ms = 21;
  if (this->tow_at_current_symbol_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->tow_at_current_symbol_ms(), output);
  }

  // double pseudorange_m = 22;
  if (this->pseudorange_m() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->pseudorange_m(), output);
  }

  // double rx_time = 23;
  if (this->rx_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->rx_time(), output);
  }

  // bool flag_valid_pseudorange = 24;
  if (this->flag_valid_pseudorange() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->flag_valid_pseudorange(), output);
  }

  // double interp_tow_ms = 25;
  if (this->interp_tow_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->interp_tow_ms(), output);
  }

  // bool flag_PLL_180_deg_phase_locked = 26;
  if (this->flag_pll_180_deg_phase_locked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->flag_pll_180_deg_phase_locked(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gnss_sdr.GnssSynchro)
}

::google::protobuf::uint8* GnssSynchro::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gnss_sdr.GnssSynchro)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string system = 1;
  if (this->system().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system().data(), static_cast<int>(this->system().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gnss_sdr.GnssSynchro.system");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->system(), target);
  }

  // string signal = 2;
  if (this->signal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signal().data(), static_cast<int>(this->signal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gnss_sdr.GnssSynchro.signal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signal(), target);
  }

  // uint32 prn = 3;
  if (this->prn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prn(), target);
  }

  // int32 channel_id = 4;
  if (this->channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->channel_id(), target);
  }

  // double acq_delay_samples = 5;
  if (this->acq_delay_samples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->acq_delay_samples(), target);
  }

  // double acq_doppler_hz = 6;
  if (this->acq_doppler_hz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->acq_doppler_hz(), target);
  }

  // uint64 acq_samplestamp_samples = 7;
  if (this->acq_samplestamp_samples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->acq_samplestamp_samples(), target);
  }

  // uint32 acq_doppler_step = 8;
  if (this->acq_doppler_step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->acq_doppler_step(), target);
  }

  // bool flag_valid_acquisition = 9;
  if (this->flag_valid_acquisition() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->flag_valid_acquisition(), target);
  }

  // int64 fs = 10;
  if (this->fs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->fs(), target);
  }

  // double prompt_i = 11;
  if (this->prompt_i() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->prompt_i(), target);
  }

  // double prompt_q = 12;
  if (this->prompt_q() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->prompt_q(), target);
  }

  // double cn0_db_hz = 13;
  if (this->cn0_db_hz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->cn0_db_hz(), target);
  }

  // double carrier_doppler_hz = 14;
  if (this->carrier_doppler_hz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->carrier_doppler_hz(), target);
  }

  // double carrier_phase_rads = 15;
  if (this->carrier_phase_rads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->carrier_phase_rads(), target);
  }

  // double code_phase_samples = 16;
  if (this->code_phase_samples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->code_phase_samples(), target);
  }

  // uint64 tracking_sample_counter = 17;
  if (this->tracking_sample_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->tracking_sample_counter(), target);
  }

  // bool flag_valid_symbol_output = 18;
  if (this->flag_valid_symbol_output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->flag_valid_symbol_output(), target);
  }

  // int32 correlation_length_ms = 19;
  if (this->correlation_length_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->correlation_length_ms(), target);
  }

  // bool flag_valid_word = 20;
  if (this->flag_valid_word() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->flag_valid_word(), target);
  }

  // uint32 tow_at_current_symbol_ms = 21;
  if (this->tow_at_current_symbol_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->tow_at_current_symbol_ms(), target);
  }

  // double pseudorange_m = 22;
  if (this->pseudorange_m() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->pseudorange_m(), target);
  }

  // double rx_time = 23;
  if (this->rx_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->rx_time(), target);
  }

  // bool flag_valid_pseudorange = 24;
  if (this->flag_valid_pseudorange() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->flag_valid_pseudorange(), target);
  }

  // double interp_tow_ms = 25;
  if (this->interp_tow_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->interp_tow_ms(), target);
  }

  // bool flag_PLL_180_deg_phase_locked = 26;
  if (this->flag_pll_180_deg_phase_locked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->flag_pll_180_deg_phase_locked(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnss_sdr.GnssSynchro)
  return target;
}

size_t GnssSynchro::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnss_sdr.GnssSynchro)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string system = 1;
  if (this->system().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->system());
  }

  // string signal = 2;
  if (this->signal().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signal());
  }

  // uint32 prn = 3;
  if (this->prn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prn());
  }

  // int32 channel_id = 4;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel_id());
  }

  // double acq_delay_samples = 5;
  if (this->acq_delay_samples() != 0) {
    total_size += 1 + 8;
  }

  // double acq_doppler_hz = 6;
  if (this->acq_doppler_hz() != 0) {
    total_size += 1 + 8;
  }

  // uint64 acq_samplestamp_samples = 7;
  if (this->acq_samplestamp_samples() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->acq_samplestamp_samples());
  }

  // int64 fs = 10;
  if (this->fs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fs());
  }

  // double prompt_i = 11;
  if (this->prompt_i() != 0) {
    total_size += 1 + 8;
  }

  // double prompt_q = 12;
  if (this->prompt_q() != 0) {
    total_size += 1 + 8;
  }

  // double cn0_db_hz = 13;
  if (this->cn0_db_hz() != 0) {
    total_size += 1 + 8;
  }

  // double carrier_doppler_hz = 14;
  if (this->carrier_doppler_hz() != 0) {
    total_size += 1 + 8;
  }

  // double carrier_phase_rads = 15;
  if (this->carrier_phase_rads() != 0) {
    total_size += 1 + 8;
  }

  // uint32 acq_doppler_step = 8;
  if (this->acq_doppler_step() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->acq_doppler_step());
  }

  // bool flag_valid_acquisition = 9;
  if (this->flag_valid_acquisition() != 0) {
    total_size += 1 + 1;
  }

  // bool flag_valid_symbol_output = 18;
  if (this->flag_valid_symbol_output() != 0) {
    total_size += 2 + 1;
  }

  // bool flag_valid_word = 20;
  if (this->flag_valid_word() != 0) {
    total_size += 2 + 1;
  }

  // bool flag_valid_pseudorange = 24;
  if (this->flag_valid_pseudorange() != 0) {
    total_size += 2 + 1;
  }

  // double code_phase_samples = 16;
  if (this->code_phase_samples() != 0) {
    total_size += 2 + 8;
  }

  // uint64 tracking_sample_counter = 17;
  if (this->tracking_sample_counter() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tracking_sample_counter());
  }

  // int32 correlation_length_ms = 19;
  if (this->correlation_length_ms() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->correlation_length_ms());
  }

  // uint32 tow_at_current_symbol_ms = 21;
  if (this->tow_at_current_symbol_ms() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tow_at_current_symbol_ms());
  }

  // double pseudorange_m = 22;
  if (this->pseudorange_m() != 0) {
    total_size += 2 + 8;
  }

  // double rx_time = 23;
  if (this->rx_time() != 0) {
    total_size += 2 + 8;
  }

  // double interp_tow_ms = 25;
  if (this->interp_tow_ms() != 0) {
    total_size += 2 + 8;
  }

  // bool flag_PLL_180_deg_phase_locked = 26;
  if (this->flag_pll_180_deg_phase_locked() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GnssSynchro::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnss_sdr.GnssSynchro)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssSynchro* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GnssSynchro>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnss_sdr.GnssSynchro)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnss_sdr.GnssSynchro)
    MergeFrom(*source);
  }
}

void GnssSynchro::MergeFrom(const GnssSynchro& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnss_sdr.GnssSynchro)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.system().size() > 0) {

    system_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
  if (from.signal().size() > 0) {

    signal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signal_);
  }
  if (from.prn() != 0) {
    set_prn(from.prn());
  }
  if (from.channel_id() != 0) {
    set_channel_id(from.channel_id());
  }
  if (from.acq_delay_samples() != 0) {
    set_acq_delay_samples(from.acq_delay_samples());
  }
  if (from.acq_doppler_hz() != 0) {
    set_acq_doppler_hz(from.acq_doppler_hz());
  }
  if (from.acq_samplestamp_samples() != 0) {
    set_acq_samplestamp_samples(from.acq_samplestamp_samples());
  }
  if (from.fs() != 0) {
    set_fs(from.fs());
  }
  if (from.prompt_i() != 0) {
    set_prompt_i(from.prompt_i());
  }
  if (from.prompt_q() != 0) {
    set_prompt_q(from.prompt_q());
  }
  if (from.cn0_db_hz() != 0) {
    set_cn0_db_hz(from.cn0_db_hz());
  }
  if (from.carrier_doppler_hz() != 0) {
    set_carrier_doppler_hz(from.carrier_doppler_hz());
  }
  if (from.carrier_phase_rads() != 0) {
    set_carrier_phase_rads(from.carrier_phase_rads());
  }
  if (from.acq_doppler_step() != 0) {
    set_acq_doppler_step(from.acq_doppler_step());
  }
  if (from.flag_valid_acquisition() != 0) {
    set_flag_valid_acquisition(from.flag_valid_acquisition());
  }
  if (from.flag_valid_symbol_output() != 0) {
    set_flag_valid_symbol_output(from.flag_valid_symbol_output());
  }
  if (from.flag_valid_word() != 0) {
    set_flag_valid_word(from.flag_valid_word());
  }
  if (from.flag_valid_pseudorange() != 0) {
    set_flag_valid_pseudorange(from.flag_valid_pseudorange());
  }
  if (from.code_phase_samples() != 0) {
    set_code_phase_samples(from.code_phase_samples());
  }
  if (from.tracking_sample_counter() != 0) {
    set_tracking_sample_counter(from.tracking_sample_counter());
  }
  if (from.correlation_length_ms() != 0) {
    set_correlation_length_ms(from.correlation_length_ms());
  }
  if (from.tow_at_current_symbol_ms() != 0) {
    set_tow_at_current_symbol_ms(from.tow_at_current_symbol_ms());
  }
  if (from.pseudorange_m() != 0) {
    set_pseudorange_m(from.pseudorange_m());
  }
  if (from.rx_time() != 0) {
    set_rx_time(from.rx_time());
  }
  if (from.interp_tow_ms() != 0) {
    set_interp_tow_ms(from.interp_tow_ms());
  }
  if (from.flag_pll_180_deg_phase_locked() != 0) {
    set_flag_pll_180_deg_phase_locked(from.flag_pll_180_deg_phase_locked());
  }
}

void GnssSynchro::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnss_sdr.GnssSynchro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssSynchro::CopyFrom(const GnssSynchro& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnss_sdr.GnssSynchro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssSynchro::IsInitialized() const {
  return true;
}

void GnssSynchro::Swap(GnssSynchro* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GnssSynchro::InternalSwap(GnssSynchro* other) {
  using std::swap;
  system_.Swap(&other->system_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signal_.Swap(&other->signal_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(prn_, other->prn_);
  swap(channel_id_, other->channel_id_);
  swap(acq_delay_samples_, other->acq_delay_samples_);
  swap(acq_doppler_hz_, other->acq_doppler_hz_);
  swap(acq_samplestamp_samples_, other->acq_samplestamp_samples_);
  swap(fs_, other->fs_);
  swap(prompt_i_, other->prompt_i_);
  swap(prompt_q_, other->prompt_q_);
  swap(cn0_db_hz_, other->cn0_db_hz_);
  swap(carrier_doppler_hz_, other->carrier_doppler_hz_);
  swap(carrier_phase_rads_, other->carrier_phase_rads_);
  swap(acq_doppler_step_, other->acq_doppler_step_);
  swap(flag_valid_acquisition_, other->flag_valid_acquisition_);
  swap(flag_valid_symbol_output_, other->flag_valid_symbol_output_);
  swap(flag_valid_word_, other->flag_valid_word_);
  swap(flag_valid_pseudorange_, other->flag_valid_pseudorange_);
  swap(code_phase_samples_, other->code_phase_samples_);
  swap(tracking_sample_counter_, other->tracking_sample_counter_);
  swap(correlation_length_ms_, other->correlation_length_ms_);
  swap(tow_at_current_symbol_ms_, other->tow_at_current_symbol_ms_);
  swap(pseudorange_m_, other->pseudorange_m_);
  swap(rx_time_, other->rx_time_);
  swap(interp_tow_ms_, other->interp_tow_ms_);
  swap(flag_pll_180_deg_phase_locked_, other->flag_pll_180_deg_phase_locked_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GnssSynchro::GetMetadata() const {
  protobuf_gnss_5fsynchro_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fsynchro_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Observables::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Observables::kObservableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Observables::Observables()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gnss_5fsynchro_2eproto::scc_info_Observables.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gnss_sdr.Observables)
}
Observables::Observables(const Observables& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      observable_(from.observable_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gnss_sdr.Observables)
}

void Observables::SharedCtor() {
}

Observables::~Observables() {
  // @@protoc_insertion_point(destructor:gnss_sdr.Observables)
  SharedDtor();
}

void Observables::SharedDtor() {
}

void Observables::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Observables::descriptor() {
  ::protobuf_gnss_5fsynchro_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fsynchro_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Observables& Observables::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gnss_5fsynchro_2eproto::scc_info_Observables.base);
  return *internal_default_instance();
}


void Observables::Clear() {
// @@protoc_insertion_point(message_clear_start:gnss_sdr.Observables)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  observable_.Clear();
  _internal_metadata_.Clear();
}

bool Observables::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gnss_sdr.Observables)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gnss_sdr.GnssSynchro observable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_observable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gnss_sdr.Observables)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gnss_sdr.Observables)
  return false;
#undef DO_
}

void Observables::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gnss_sdr.Observables)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gnss_sdr.GnssSynchro observable = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->observable_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->observable(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gnss_sdr.Observables)
}

::google::protobuf::uint8* Observables::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gnss_sdr.Observables)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gnss_sdr.GnssSynchro observable = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->observable_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->observable(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnss_sdr.Observables)
  return target;
}

size_t Observables::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnss_sdr.Observables)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gnss_sdr.GnssSynchro observable = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->observable_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->observable(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Observables::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gnss_sdr.Observables)
  GOOGLE_DCHECK_NE(&from, this);
  const Observables* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Observables>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gnss_sdr.Observables)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gnss_sdr.Observables)
    MergeFrom(*source);
  }
}

void Observables::MergeFrom(const Observables& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnss_sdr.Observables)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  observable_.MergeFrom(from.observable_);
}

void Observables::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gnss_sdr.Observables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Observables::CopyFrom(const Observables& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnss_sdr.Observables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Observables::IsInitialized() const {
  return true;
}

void Observables::Swap(Observables* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Observables::InternalSwap(Observables* other) {
  using std::swap;
  CastToBase(&observable_)->InternalSwap(CastToBase(&other->observable_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Observables::GetMetadata() const {
  protobuf_gnss_5fsynchro_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_5fsynchro_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss_sdr
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gnss_sdr::GnssSynchro* Arena::CreateMaybeMessage< ::gnss_sdr::GnssSynchro >(Arena* arena) {
  return Arena::CreateInternal< ::gnss_sdr::GnssSynchro >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gnss_sdr::Observables* Arena::CreateMaybeMessage< ::gnss_sdr::Observables >(Arena* arena) {
  return Arena::CreateInternal< ::gnss_sdr::Observables >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
